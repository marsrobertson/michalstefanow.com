How to learn code and find a well-paid job in IT?

I 2016 wrote a book about finding a job - preparing for interview, tweaking the CV - and the most common question I was getting - how do I learn the skills in the first place? 

I have lifetime of experience working with computers and your way of learning will differ from mine - technology has moved forward. There are plenty of resources available - some of them are free but in reality you should invest in finding quality ones.

============================

Look no further: ROB PERCIVAL

Experience.
Professionalism.
Second Edition.

Save your energy on actually doing stuff, rather than hesitating which course to choose.

And if you stop reading this book in favour of doing the actual course - well done to you. Action speak louder than words, you've chosen rightly.

(...you can always resume couple weeks later, once the course is completed...)

By doing the course you'll see what is it like to solve actual technical problems. You'll also see what skills and qualities are practical in the job of a programmer.

There is no secret to programming - the best programmers I know encounter roadblocks in their work - they have experience, knowledge, tools, process allowing them to handle them more officienly.

Enough of the praise, see ______ reviews.

<<<< because I'm recommending him here a voucher code >>>>

Actually... His prices are so low it would be unfair to drive them any further...

==============================



In the past couple of years there is market demand for IT workers. Government announces the need for STEM (science, technology, engineering, mathematics) graduades and top companies are competing for scarce talent.

Back in 2005, when I was choosing my university the situation was the same. I invested 5 years of my life into a Computer Science degree and from the time perspective I still have no idea if that was the right choice.

To be precise - it's more than 5 years. Fallacy of sunken cost - once you have a degree it's typical to start working in field of study to recoup the investment. Fast forward a few years, a few promotions, a few new jobs - now I'm at "six figure" level and moving on has never been more difficult.

*********************************

Back in a day my father, university lecturer with PhD title was earning $10 (ten US dollars) per month. There were no passports, noone could leave the country (only those brave refugees who were claiming political asylum in other places).  I was born in 1986, the communism fell in 1989 (many consider Berlin Wall as a symbol). I don't remember these times - food rationing and empty shelves in the shops... Some people made a lot of money during the transformation - mostly those related to previous government, communist party and secret service. I'm the first generation who has the privilege to live in a free country and I try to use my time wisely.

********************************

I was searching for a job many times. Never really understood the concept of "permament" employment... What does it mean? There are some universal laws - karma, gravity - but in a free market economy where goal of the business is to make money - to call employment "permanent" is a major misconception.

My attitude towards work got me fired a number of times - but because I knew how to navigate the process of finding jobs and my skills were in demand - I was always immediately re-hired. Sometimes it required tweaking my CV and telling a convincing story. I actually wrote a book about finding jobs as an attempt of "content marketing" for the recruitment agency but I didn't succeed in that venture. "Easy money" with no higher purpose... Does not work in my reality.

Currently I'm focusing on the ASTRALSHIP - this is the ultimate project. It will be never finished - it will be always "work in progress" - the sheer joy and energy coming from working on the chapel - IMMENSE. We own a church from 1838 into a visionary space to realise human potential and heal the planet. Go visit our website, by the time you read this words we should be sailing!

I have a deep core belief that I can add a lot of value. If I dedicate 100 hours towards creating and promoting this publication and someone becomes a successful programmer - that's 8 hours per day multiplied by weeks, months and years - it means that I did something right. See also 80000hours - an organisation that helps people upgrade their careers.


********************************


********************************

The million dollar question I would like to ask - what is your main motivation of learning to code? Some options immediately come to mind:
* to find a job as programmer
* to build your own startup
* to use programming skills in your existing mission (becoming super efficient at your current role)

The good news is - you can perform some tasks without learning how to code. There is a number of services that will give you superpowers right off the bat:
* IFTTT, Zapier

Connecting, glueing various services together.


#### Google Drive, Google Docs, Google Forms
I just had a meeting with a lawyer and showed him option to share his documents with the clients, even when they do not have Google account. "Anyone with the link can view" - easy win!

#### Excel


#### Slack
Communication in the team. 

#### Trello
Super simple task management.

#### Basecamp, Asana, Jira
There are so many project management tools, it just blews my mind. 
Make sure you and your team are on the same page.

#### Various tools
Extracting (scraping) data from websites - import.io
Marketing automation
Newsletters
Follow up emails
Scheduling posts on FB via Buffer
There are many tools that for free (or $5 a month) do exactly what you want try to achieve



Why everyone should be technical?

Sprinkling some programming knowledge over traditional problems gives you an edge. Even knowing some programming terms allows you to better communicate with technical people.

Programming yes, becoming full-time programmer maybe
I guess that's not what you wanted to hear - me encouraging you to mantain your current profession and become world class.
If you want to find a job a computer programmer only because it pays well - I'm not convinced if that is the best idea. 



********************************

## Technology Choice

Working on the web is a visually pleasing experience - you can see the buttons, forms, imagess - website forming. 

Is also has an immediate reward and tight feedback loop - it's easy to tell if something is working or not.

Save the file - autoreload - next second I see updated version on the screen, give or take a few clicks to navigate to previous state of the app.

When I was working with the command - black screen and blobs of text - it was more difficult to establish whether some code I wrote is working or not.

I highly encourage you to have some visual result of your work, an easy way to tell if your code is working or not.

Programming can often be frustrating and to persevere you need to have many wins during the day.

*******************************

Become independent

Choose the line of work that suits you

My way of thinking - to do things independently. You probably saw some pictures of guys sitting on the beach with their laptop... If your skills are valuable only as part of a larger team - say PM (Project Manager) - then it will be difficult to become independent. Web development is different - pretty much every business and every person requires an online presence in one shape or another - there is a demand web development services and there is huge chance you'll find a job too, and if finding regular job is not something for you - you'll be able to work on freelance basis with your selected clients.

 

There are many technical areas that require different mindset - such as testing, database design, system administration.

My feeling is that web is most versatile and super easy to get started


Successful companies have teams and various methods of managing complexity. I challenge you to become independent - of course at some point you'll be dependent on your customers but the point still stands - to be able to deliver something from start to finish. It doesn't have to be next Mona Lisa, something "good enough" is good enough. To be independent and be able to do stuff without communication overhead, waiting for other people, not to mention hiring other people - massive plus.

I suggest you have a look at Firebase. I started using them back in 2013 while they were still in private beta - they were sponsoring a hackathon (weekend event dedicated where designers and developers build stuff). In 2016 they were acquired by Google which means "we are here to stay" and if you learn these skills it's a huge

<<< Facebook Break Fast and Stable Infra>>>

Knowing a little bit of everyting (full stack) will give you a competetive edge.

********************************
2. Set your mind on a  project

(could be realistic or not)

Universe rewards brawery, https://en.wikipedia.org/wiki/Fortune_favours_the_bold

The best project is one that is slighly beyond your current level of ability - outside of your comfort zone - but not impossible.


It doesn't have to be realistic at first - soon you'll get a lot of feedback forcing you to re-asses, pivot, change strategy.

You might realise that some of the features are too optimistic at this stage - that you require more people, new skills.


### Exaple project: home page

I really like programming test for ThoughtWorks (well known consultancy) - create your online portfolio. It's broad, it's generic, everyone needs it. It's a good way of testing candidate abilities in a multiple ways.

1) Are they creative?
2) Are they able to work without supervision?
3) To know their accomplishments

I didn't pass this test this one but the overal experience itself was positive - they are specialists, they know it's difficult to hire experienced programmers. This might be a hint for you - market is hiring 

Lessons learnt - when you want the job - go the extra mile - go above and beyond. 


Have a code repository with your code samples.

Majority of the recruiters ask for it and I agree to that - if I was hiring I'd always require to see code samples.

If you don't have it - start working on it. Start with your own website and / or website for your friends and family.



********************************

### Exaple project: first client

Just ask around. Word of mouth can go a long way. There are so many people - self-employed independent contractors who are just about to start their own thing but require a website... Because you are starting and they are starting - you can form a symbiotic relationship, a winning team - and keep the business relationship growing.

Working for free shouldn't be an option - assuming you did your homework - you are perfectly able of delivering some value. People who get stuff for free - do not appreciate it. On the other hand - people who pay - have expectations, regardless the actual monery value. Paying £100 or £1000 is categorised in the same mental category as "payment" so I encourage you to follow the following formula:
1) think about the amount that you think is on the upper side what you think is fair
2) multiply the number by two

In my career as freelance developer I didn't charge enough to my clients. And once you start with a low rate it's difficult to renegotiate.

#### Communication with client

Have in writing, standard terms, letter of intent.
- scope
- date of completion
- milestone
- assets (images, text)
- maintenance

*************************

Personal note - I went full circle - from having clients, using that work in my portfolio, to corporate job, to building own products. Your path path probably will be different - I encourage you to take a leap of faith and starting from building your own product. A little tool that solves a problem.

*************************

*******************************

Test your work


CHROME, FIREFOX, EDGE

You'll have to test in each browser anyway :)

Chrome is the most popular browser.

Historically Firefox was a dominant website for developers



TEST ON MOBILE

iOS, Android and Windows Phone potentially.



It happened to me many times that it worked for me, sent it to the client and it wasn't that great :)

Usually what I do this time is to record 1 minute walkthrough video - me showing stuff. To record 1 minute video takes exactly 1 minute, then a few seconds to upload to Youtube, set as "unlisted" and add [unlisted] in the title so your client doesn't freak out :)

(of course the privacy option is visible but not immediately obvious for everyone)

Recording short videos goes a long way. Sometimes I do it instead of writing email, maybe I should do this instead of writing this book? So here is what I do - quote this fragment - and if 10 people pre-pay Kickstarter style video course based on this book I'll do it. It won't be reading the stuff, it will be probably new content :)


## Other areas

Another areas of technology that are booming right now:

#### Machine Learning and Aritficial Intelligence

I've seen the Google IO Keynote and they invest so heavily. The tool they are promoting - TensorFlow - is becoming increasingly popular.

#### VR + AR


#### Blockchain

See what programming languages, frameworks, technologies are relevant

I know JavaScript very well.

I know Python is very good for learning and is widely supported.

The dealbreaker about JavaScript - it is used on the web and it is super easy to get started. You already have the device capable of running JavaScript out of the box - no need to install anything - if you are able to read this book, you already have a web browser.

In the moment of writing this book Google is making big push around Tensor Flow - framework dedicated towards machine learning.

Another good choice when learning new technology (this is something I'll probably do) it to learn smart contracts - Ethereum, Blockchain, Solidity... At this point in time I have only a general idea what's involved but I feel intuitively that in the future people will less depend on government but will create their own jurisdictions. It is already happening and Blockchain programmers are in high demand.

<<< NOTE TO SELF: JUST FUCKING DO IT >>>

Another note to self - I'm alread a programmer - spending 8 hours a day in front of a computer coding. I don't have much energy for programming, as opposed to writing a book which seems a relaxing activity. Offloading my intellectual property - everything I know about modern world and how to navigate the reality.


# DESIGN





********************************* RANDOM WAR STORY *****************

Currently I work in a job - highly regulated environemnt - so many different system and process isn't fully automated. Even the simplest change such as changing text here or there is 15 minutes.

orry if I'm using difficult workds, see glossary

Project management software
Source control repository.
Build + deployment.
Veryfying that fix has been applied.


15 minutes is the bare minumum, physical limit of our systems.
That was the super-simple example, usually changes are much involved and require testing.
On my best day I was able to close 4 different issues.
Small win every time - allow yourself a boost of happiness - your work is progressing.








********************************

********************************


### Frameworks libraries and APIs platforms

First learn the basics. Soon you'll realise there are some typical problems '

Sometimes I say my job is plumbing things together.

Everything has been done already, many problems has been solved. Opportunities lives on the intersection of things. Tinder for dogs - voilla! And there is the thing:
- no need to build a phone
- no need to develop fast-charfing battery system
- no need to worry about WiFi congfiguration and cellurar connectivty

You take existing tools and use them. Standing on the shoulders of the giants.

********************************

### Tools

Every single piece of software comes with 30 days trial. Try a few and make your own opinion - see what works for you best. Good editor or IDE (integrated development environment) will save you thousands of hours in the long run.


<<< XKCD configure >>>

Personally I don't like spending time configuring stuff. It should work out of the box, without fiddling in the settings. Very often I'm disappointed when some tool / framework / library doesn not have a working demo. It happens way too often and quite literally - I'm frustrated, I'm tired, by the time I solve the mystery I don't have much energy to use the actual product.

If it happens to you - don't worry - I've been in a similar position infinite number of times. Trying out new thing and banging head against the wall. With experience you'll learn how to troubleshoot typical problems and how to ask better questions.

Quality of the demo / tutorial / example is good estimation of quality of the product. It's the first impression that counts and good companies simply get it!

### StackOverflow
Create your profile now.
You know this website anyway.
Any  search engine for a certain coding error gets you there.
Even Google in their official documentation is linking to StackOverflow when asking for support.
It's effectiely a "go to" place for solving technical problems.
So get your profile set up, full stop.

Some amazing thing about Stack Overflow:

1) As you start typing your question you'll be presented with some suggestions - to related topics.

Always mention what you have tried already what was the output.

Don't just post "here is my code, doesn't work", be 

2) Precise communication

You are describing problem to other people - yeed to be precise, specific.
Soon you'll discover that in the process you are starting answering your own question.
As you start explaining what have you tried, you'll  discover "but I haven't tried that" and before posting the question you'll have a chance to discover other options.

3) Isolated case

Don't just post 100+ lines of code.
Minimise the code that is problematic.
It is another great exercise - simplifying the problem.
Sometimes there are some "unrelated" unintended consequences and by reducing the problem it may start working - then you'll know the offending bits of code.

4) Similar question suggestions
As you provide more information about your problem, Stack Oveflow is smart enough to suggest some answers related to the topic.


#### Rubber duck debugging

There process of talking your problem to another person - when there is no another person around - use a rubber duck instead. It's similar to StackOverflow in a way that you explain your problem in a detailed manner.


********************************


Heroku

Node

Debugger


********************************


4. Choose a few tools and know them well


A) EDITOR
Sublime Text
Atom
Notepad++ populat among Windows programmers

WebStorm - developed by JetBrains
Visual Studio Code (FREE)


B) COMMUNITIES

Github:
By far the largest.

Github is very popular but private repositories require a monthly fee. Other competetors occupy this niche and offer them for free.
What is a private respoistory?

BitBucket / GitLab:



StackOverflow:

JSFiddle
JsBin
Plnkr
Codepen

I use them equally. JSFiddle was probably the first one and is traditionally
HackerX
HackerWall
InterviewStreet
TopCoder

AirPair

Watching people coding live! 

Dribble:
Mostly for designers.
Sometimes I push some pixels here and there but I'm not a designer.
I asked for invite a number of times and eventually I didn't get it - I wasn't determined enough.


********************************

5. Go to a bootcamp ()if you can easily afford it)

Personally I've never been to such facility but it seems legit.

It ticks all the boxes. What could possibly go wrong? The reality is most of the people cannot afford thousands of dollars / pounds and several weeks out of their life.

(it's not only cost of tuition but cost of the lost income)

Some people take loans (banks, friends, family) to undertake such education. It is defnitely an option - using money as a tool, as an enabler.

I can honestly tell you - in the times when I was using bank loans I didn't feel well.



### Online course on Udemy, Coursera, EdX or any other platform

See the first page.
Low risk high reward.
Worts that could happen 

I remember the ver first course of this type. It was still a novelty. The professor went on to establish one of successful in the space

<<< RESEARCH CORRELATION >>>

And you know what? The most successful programmers are doing this.

I did this.

But I'm not doing it right now.

You may ask why?

1) writing this book
2) in my area of expertise I'm already specialist, courses target mostly newcommers
3) bit tired to code after long day at work

(probably a few other reasons)




********************************
Don't go to University

It takes too long. It's too expensive. In the UK and US it's s a costly activity - students tend to take loans so when they leave university they are in debt. Hurray! You got a degree, now you have to work to pay off your loan...

I have nothing against education and learning. You should always learn. If you really think that going to university is something you really have to do:
* Take a gap year first
* Be sure what you want to study
* Don't pay for it: scholarhips, or maybe a different country with free education? (you may need to learn the language first)

I made several mistakes in my approach to university. Probably the biggest one was sense of entitlement - because I graduated from the top degree in the top high school - I thought I'll get new jobs easily.

> Hard work beats talent, when talent doesn't work.

University could be good in terms of making friends, expanding your network but... I bet you can make friends anyway. I highly encourage you to watch a few video about "daygame" (approaching people of opposite gender) and you'll never have social anxiety. One Jedi trick to make it work - be certain (absolutely convinced) about your self-worth and think in terms "I'm the best thing that could happen to that person".


Social skills, positive attitude, equally important at work.

I can tell you that some of the best programmers I know have mild spectrum of autism - asperberg syndrome. What it emans in plain English - deep interest in particilar subject, being very detailed, etc... These qualities are super useful when programming so no wonder why they are so good! There is an element of social awkwardness but they cope very well, I'm an unconventional weirdo too and I'm reasonably open and transparent about it.


********************************

Get a job

The best what could happen to you - to learn on the job.
In reality - even if it is entry-level, "all training provided" apprentice type of job - there will be always some entry exam / recruitment test.

So you need to know some basics anyway. Or at least show some initiative and interest. 

It should be clear, it should be obvious - as an employer I would rather hire someone who has already some skills. No such thing as free launch... I was actually a bad employee - I always saw 'what's in it for me' - I should have thought more about the value I provide to the company. Too bad the incentives were not aligned  in the employment contracts - all obligations, reponsibilities and no upside potential. As an employee I couldn't escape "employee mentality" - doign just enough not to get fired and not engaged


That is why in my current project (astralship.org) we don't want employees - we want to have partners, collaborators, supporters and when hiring professionals we pay 50% cash 50% equity.


*****

# Links

* https://medium.com/javascript-scene/want-to-code-a-university-degree-might-be-a-huge-waste-of-time-81e1817a2ef0
* https://www.stackoverflowbusiness.com/blog/how-todays-developers-are-learning-to-code

There is less than 1% difference in pay between masters degree holders and bootcamp graduates
69% of working software developers are self-taught
43% cite on-the-job training as their primary learning resource
25% used online courses



*******************************
********************************










********************************

In the world that takes advantage
BE REBELIOUS - BE HAPPY

********************************








***************

AUTOMATION

Good news is - automation is taking over - people don't have to work. See what percentage of population works in agriculture:

* in the UK - https://en.wikipedia.org/wiki/Agriculture_in_the_United_Kingdom - 1.5%
* in the US - https://en.wikipedia.org/wiki/Agriculture_in_the_United_States#Employment - less than 2%
 
 
Nature already knows how to grow food, there is abundant energy from the Sun, and in my reality people don't have to work... It will take some time until it will happen but have a look at Universal Basic Income - the change is there...

********************************

Truth bombs and other things I don't like

Bush family was doing business with Hitler?

In the era of free information such association would be seriously uncool. For some reason it didn't stop them becoming president of the United States - much respect to them!

You sure know 9/11 - some airplanes hitting some buildings that consequently fell down. Have you heard of Building 7? That is completely bonkers - please apply some critical, rational thinking

Fluoride in the water.

War on drugs + Private prison system + Cash for kids scandal.

(Lowcy Skor in Poland - selling information about deceased people to funeral homes - too bad people haven't died yet so medical stuff was feeding them with a drug causing death)

Sugar industry sponsoring research stating that fat is leading cause of obesity.

Exxon Mobil and climate denial.

Fashion Models.

Consuption.

Advertising of loans, debts and buying stuff that you can pay later.

********************************

WAR ON DRUGS

Develop your own judgement about mind altering substances.

Cannabis is leading the way.

Did they make drugs illegal because it can harm you?

- alcohol and tobacco widely available
- feeding animals with antibiotics
- adding sugar to so many processed foods
- fluoride in water 

See Nixon advisor:

Now there we have internet, research, data, science.

War on drugs is probaby the single biggest fuckup in the history of humanity. 



SELFISHNESS

Giving money to homeless is a selfish act:
* it makes me happy
* they have more money, so they can help others (including me)
* they are less likely to commit a crime

(not accusing or anything but being desperate sometimes require desperate measures - to steal a wallet might seem like an immediatete relief of financial needs but causes a lot of distress - to apply for new ID and payment cards is a serious hassle and cost much more in terms of wasted time )



...BECOME VEGAN

Just think about it - animal agriculture - cutting rainforest to grow food for animals. It hurts me to admit that I eat eggs and beans in my work canteene. I'd love to go vegan but I don't have enough support network and the climate of the UK is not supportive. Call me a concious hypocrite and I'll love you anyway.

PROTEIN INTATE
Engevita
Chlorella
Hemp Seeds



********************************

GLOSSARY:

Hacker
Hackathon
IDE

PARADOX OF CHOICE
<<< WATCH THE TED TALK >>> - in essence - if there are 2 flavours of icecream we are much more likely to be happy with the choice.

MENTAL FATIGUE
When we wake up we have mental power to do 100 decisions - choosing your breakfast is a decision and then during a day you may not have enough power to be sharp when it really matters. That's why:
Steve jobs - always the same black turtle neck
Barrack Obama - same suit
Mark Zuckerberg - same T-shirt. 

I'm having same breakfast everyday, and I'd like to...



******************************




Buying a house

I did some research.
What are the associated costs: stamp duty, solicitor fees, valuation costs
- https://money.stackexchange.com/questions/71539/how-long-do-i-have-to-live-as-first-time-buyer-before-renting-out-the-property
- https://money.stackexchange.com/questions/71445/how-long-i-should-pay-the-mortgage-to-break-even-when-selling-is-2-years-enoug

In the UK there are some special options for first-time buyers so I asked if it is allowed to rent such a property.

Maybe I could maximise my salary, organise the deposit, and buy some shoebox in a place where I don't want to live. But do I want to invest in real estate? I'm actually doing it in Wales... Refurbishing old chapel (built in 1838). The chapel is huge and we cannot afford to work on the main space. There is a vestry - small building attached to the chapel that doesn't have so many restrictions and we don't need that much money to make it work.

(London is a place where all the money form Asia, China, Russia, Middle East is invested and I don't want to compete with these guys)

Historically real-estate prices has been going up but I'd much rather place a bet on options that provide more independence. Virtual Reality, Hyperloop and the traditional concept of 9-5 working in an office is coming to an end...


*******************************

Polyamory.

I'm not qualified. I was popular at school but I was never dating more than a single girl at time. These days I feel attraction towards opposite sex and I'm allowing the following concept:
* sexual partner
* business partner
* yoga partner
* running partner

We can pick and choose our relationships to suit our interests.

Coming from the position of infinite abundance - there is always enough of everything for everyone. Even if something is available in very limited quantities the price goes up and the product is available at higher price, and other mid-range and low-end product appear.


*******************************

Having kids.

You must be really bored.
Do yourself a favour - borrow kids of your friends for a weekend and relief them.
You'll see what is it like to be  responsible without going through an emotional drama of pregnancy

I did a major mistake - rather than read books and ask people how to better parent, I was trying to maximise my productivity and per hour output.

RIDICOLOUS. What I was thinking back then? 




My kids are super cool. They are smart, clever, adventerous, no medical conditions... Every parent can say that so I'm not even attemping to measure "coolness of kids" - they are all fantastic. Especially these days - with so many crystal, indigo, rainbow children coming to this planet.









********************************
